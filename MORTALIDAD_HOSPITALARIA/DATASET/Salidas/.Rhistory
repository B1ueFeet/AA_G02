options(encoding = "utf-8")
#****************************** SELECCION DE VARIABLES ****************************
#limpieza de datos
rm(list = ls())
install.packages("rstudioapi")
library(foreign)
editor <- rstudioapi::getSourceEditorContext()
ruta_dir <- dirname(editor$path)
print(ruta_dir)
#Cargas de datos al directorio
setwd(file.path(ruta_dir,"/DATASET"))
#Crear una variable
spssPoblacion <- "inec_defuncionesgenerales_2020.csv"
provincia <- 'Guayas'
#crear un directorio de salidas
salida <- "Salidas/poblacion.csv"
#Variable a consideracion
variables <- c("prov_insc","cant_insc","parr_insc","nac_fall",
"sexo", "fecha_fall", "edad",
"etnia", "lugar_ocur", "mor_viol", "autopsia",
"causa")
spss <- read.csv2(spssPoblacion, header = TRUE, sep = ";")
names(spss) <- tolower(names(spss))
#Filtrado - sbudataset
spss_poblacion <- spss[spss$prov_insc == provincia, variables]
write.csv2(spss_poblacion, salida, row.names = FALSE)
#****************************** MANEJO DE VALORES AUSENTES ****************************
install.packages("caTools")
install.packages("foreing")
install.packages("miscFuncs")
library(caTools)
library(foreing)
#****************************** SELECCION DE VARIABLES ****************************
#limpieza de datos
rm(list = ls())
install.packages("rstudioapi")
install.packages("rstudioapi")
library(foreign)
editor <- rstudioapi::getSourceEditorContext()
ruta_dir <- dirname(editor$path)
print(ruta_dir)
#Cargas de datos al directorio
setwd(file.path(ruta_dir,"/DATASET"))
#Crear una variable
spssPoblacion <- "inec_defuncionesgenerales_2020.csv"
provincia <- 'Guayas'
#crear un directorio de salidas
salida <- "Salidas/poblacion.csv"
#Variable a consideracion
variables <- c("prov_insc","cant_insc","parr_insc","nac_fall",
"sexo", "fecha_fall", "edad",
"etnia", "lugar_ocur", "mor_viol", "autopsia",
"causa")
spss <- read.csv2(spssPoblacion, header = TRUE, sep = ";")
names(spss) <- tolower(names(spss))
#Filtrado - sbudataset
spss_poblacion <- spss[spss$prov_insc == provincia, variables]
write.csv2(spss_poblacion, salida, row.names = FALSE)
#****************************** MANEJO DE VALORES AUSENTES ****************************
install.packages("caTools")
install.packages("caTools")
install.packages("foreing")
install.packages("miscFuncs")
library(caTools)
library(foreing)
library(miscFuns)
rm(list = ls())
editor <- rstudioapi::getSourceEditorContext()
ruta_dir <- dirname(editor$path)
print(ruta_dir)
#Cargas de datos al directorio
setwd(file.path(ruta_dir,"/DATASET/Salidas"))
csvFileName <- "poblacion.csv"
poblacion <- read.csv2(csvFileName, header = TRUE, sep = ";")
variables <- c("prov_insc","cant_insc","parr_insc","nac_fall",
"sexo", "fecha_fall", "edad",
"etnia", "lugar_ocur", "mor_viol", "autopsia",
"causa")
dataset <- poblacion[,variables]
#valores ausentes
colSums(is.na(dataset))
#eliminar valores ausentes
dataset$autopsia <- NULL
dataset$mor_viol <- NULL
row.has.na <- apply(dataset, 1, function(x){
any(is.na(x))
})
dataset <- dataset[!row.has.na,]
write.csv2(dataset, file = "mortalidad-hospitalaria-gye.csv", row.names = FALSE)
#valores ausentes
colSums(is.na(dataset))
rm(list=ls())
install.packages("dummy")
install.packages('kohonen')
install.packages("tictoc")
install.packages("ggplot2")
library(kohonen)
library(dummy)
library(tictoc)
library(ggplot2)
editor <- rstudioapi::getSourceEditorContext()
ruta_dir <- dirname(editor$path)
print(ruta_dir)
#Cargas de datos al directorio
setwd(file.path(ruta_dir,"/DATASET/Salidas"))
dataset_total <- read.csv2(file="mortalidad-hospitalaria-gye.csv")
datset_original <- dataset_total
colSums(is.na(dataset_total))
dataset_total$prov_insc<-factor(dataset_total$prov_insc)
dataset_total$cant_insc<-factor(dataset_total$cant_insc)
dataset_total$parr_insc<-factor(dataset_total$parr_insc)
dataset_total$nac_fall<-factor(dataset_total$nac_fall)
dataset_total$sexo<-factor(dataset_total$sexo)
dataset_total$fecha_fall<-factor(dataset_total$fecha_fall)
dataset_total$edad<-factor(dataset_total$edad)
dataset_total$etnia<-factor(dataset_total$etnia)
dataset_total$lugar_ocur<-factor(dataset_total$lugar_ocur)
dataset_total$mor_viol<-factor(dataset_total$mor_viol)
dataset_total$lugar_ocur<-factor(dataset_total$lugar_ocur)
dataset_total$causa<-factor(dataset_total$causa)
View(dataset_total)
variables <- c(2:10)
dataset<- dataset_total[,variables] # carga del data set solo con las variables
dataset <- dummy(dataset)
dataset.sc<- data.matrix(dataset)
set.seed(0)
som_grid <- somgrid(xdim=5,ydim = 5, topo= "rectangular")
tic("Time to run SOM: ") # Inicia el tiempo
som_model <- som(X=dataset.sc, grid=som_grid, rlen = 100, alpha = c(0.05, 0.01), keep.data=TRUE)
toc() # Finaliza el tiempo
#generar clusters
clusters <- som_model$unit.classif
conteo <- table(clusters)
conteo_frame <- as.data.frame(conteo)
#graficar
#preparar la paleta de colores
colBlueHotRed <- function(n, alpha = 1){
rainbow(n, end = , alpha = alpha)[n:1]
}
pretty_palette <- c("#1f77b4",'#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
colors <- function(n, alpha=1){
rev(heat.colors(n,alpha))
}
#Histograma
plot(som_model, type4 = "changes")
#mapa de calor
plot(som_model, type = "count", pallete.name = colors, heatkey = TRUE)
# tipo de mappeo
plot(som_model, type = "mapping", pchs = 1, main = "Mapping Type SOM")
plot(som_model, type = "mapping", pchs = 2, main = "Mapping Type SOM")
# tipo de mappeo
plot(som_model, type = "mapping", pchs = 1, main = "Mapping Type SOM")
plot(som_model, type = "mapping", pchs = 2, main = "Mapping Type SOM")
# por defecto
plot(som_model, main = "default SOM model")
# calidad distancia
plot(som_model, main = "Node Quality SOM", type = "quality", palette.name = colors)
#distancia a vecinos
plot(som_model, type = "dist.neighbours", palette.name = terrain.colors, main="Distance")
#grafica suponiendo valores binomiales
code<-getCodes(som_model)
var1<- 1
var2<- 2
par(mfrow = c(1,2))
plot(som_model, type = "property", property = code [,var1], main = colnames (code)[var1], heatkey = TRUE,palette.name = colors)
plot(som_model, type = "property",property = code [,var2], main = colnames (code)[var2], heatkey = TRUE,palette.name = colors)
par(mfrow = c(1,1))
plot(som_model$grid$pts)
cluster_details <-  data.frame(cluster= som_model$unit.classif,dataset_total)
conteo <- table(cluster_details$cluster)
conteo_frame <- as.data.frame(conteo)
ggplot(conteo_frame, aes(x = as.factor(Var1),y=as.factor(Freq)) )+
geom_bar(fill="blue", stat="identity")+
labs(x="ClÃ¹ster", y="Total observaciones")+
ggtitle("som -Total elementos por celda")
cluster1 <- cluster_details[cluster_details$cluster==1,]
table(cluster1$urp)
mydata <- getCodes(som_model)
wss <- (nrow(mydata-1)* sum(apply(mydata,2, var)))
for(i in 2:15){
wss[i]<- sum(kmeans(mydata,centers = i)$withinss)
}
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(1:15, wss, type="b",
xlab = "Number of clusters",
ylab="within gorups sum of squares",
main = "within cluster sum of squars(WCSS)")
#METODO DE CODO
cluster1 <- cluster_details[cluster_details$cluster==1,]
table(cluster1$urp)
mydata <- getCodes(som_model)
wss <- (nrow(mydata-1)* sum(apply(mydata,2, var)))
for(i in 2:15){
wss[i]<- sum(kmeans(mydata,centers = i)$withinss)
}
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(1:15, wss, type="b",
xlab = "Number of clusters",
ylab="within gorups sum of squares",
main = "within cluster sum of squars(WCSS)")
num_cluster <- 4
som_cluster <-
cutree(hclust(dist(getCodes(som_model))),
num_cluster)
pretty_palette <- c("#1f77b4",'#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
conteo <- table(cluster_details$cluster)
conteo_frame <- as.data.frame(conteo)
plot(som_model,
bgcol=pretty_palette[som_cluster],
main="Cluster")
plot(som_model, type="codes",
bgcol = pretty_palette[som_cluster],
main = "Cluster")
add.cluster.boundaries(som_model, som_cluster)
cluster_details<- data.frame(cluster=som_cluster[som_model$unit.classif],
datset_original)
cluster1 <- cluster_details[cluster_details$cluster==1,]
write.csv2(cluster1,"cluster1.csv")
num_cluster <- 14
som_cluster <-
cutree(hclust(dist(getCodes(som_model))),
num_cluster)
pretty_palette <- c("#1f77b4",'#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
conteo <- table(cluster_details$cluster)
conteo_frame <- as.data.frame(conteo)
plot(som_model,
bgcol=pretty_palette[som_cluster],
main="Cluster")
add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="codes",
bgcol = pretty_palette[som_cluster],
main = "Cluster")
add.cluster.boundaries(som_model, som_cluster)
cluster_details<- data.frame(cluster=som_cluster[som_model$unit.classif],
datset_original)
num_cluster <- 8
som_cluster <-
cutree(hclust(dist(getCodes(som_model))),
num_cluster)
pretty_palette <- c("#1f77b4",'#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
conteo <- table(cluster_details$cluster)
conteo_frame <- as.data.frame(conteo)
plot(som_model,
bgcol=pretty_palette[som_cluster],
main="Cluster")
add.cluster.boundaries(som_model, som_cluster)
View(cluster_details)
